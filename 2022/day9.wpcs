//
// Code of Advent 2022
//

// --- Day 9: Rope Bridge ---

function writeGrid(hmGrid, hmKnots, bPositions) {
    var iMaxCols = "..........................".length();
    var iMaxRows = hmGrid.size();
    for (var i=0; i<iMaxRows; i++) {
        if (hmGrid.containsKey(i)) {
            var iCols = hmGrid[i].size();
            if (iCols > iMaxCols) { iMaxCols = iCols; }
        }
    }
    if (iMaxRows < iMaxCols) { iMaxRows =iMaxCols; }
    for (var i=iMaxRows-1; i>=-10; i--) {
        var hmRow = hmGrid[i];
        if (hmRow == null) { hmRow = []; }
        for (var j=-10; j<iMaxCols; j++) {
            var sChar =  ".";
            if (bPositions) {
                sChar = hmRow[j].checkString(".");
            } else {
                for (var k=hmKnots.size()-1; k>=0; k--) {
                    var iPosX = hmKnots[k][0];
                    var iPosY = hmKnots[k][1];
                    if (i == iPosY && j == iPosX) {
                        sChar = (k == 0 ? "H" : toString(k));
                    }
                }
            }
            out.write(sChar);
        }
        out.writeln("");
    }
    out.writeln("");
}

function moveKnot(hmLead, hmKnot) {
    // Move hmKnot to be close enough with hmLead
    var iPosHeadX = hmLead[0];
    var iPosHeadY = hmLead[1];
    var iPosTailX = hmKnot[0];
    var iPosTailY = hmKnot[1];
    var iDistY = iPosHeadY - iPosTailY;
    var iDistX = iPosHeadX - iPosTailX;
         if (iDistY >= 2)  { iPosTailY ++; if (iDistX != 0) { iPosTailX = iPosTailX + (iDistX > 0 ? 1 : -1); } }
    else if (iDistY <= -2) { iPosTailY --; if (iDistX != 0) { iPosTailX = iPosTailX + (iDistX > 0 ? 1 : -1); } }
    else if (iDistX >= 2)  { iPosTailX ++; if (iDistY != 0) { iPosTailY = iPosTailY + (iDistY > 0 ? 1 : -1); } }
    else if (iDistX <= -2) { iPosTailX --; if (iDistY != 0) { iPosTailY = iPosTailY + (iDistY > 0 ? 1 : -1); } }
    hmKnot[0] = iPosTailX;
    hmKnot[1] = iPosTailY;
}

function countKnotPositions(iKnotCount) {
    var sLine;
    var hmKnots = [];
    for (var i=0; i<iKnotCount; i++) {
        var hmKnot = [];
        hmKnot[0] = 0;
        hmKnot[1] = 0;
        hmKnots.add(hmKnot);
    }
    var hmHead = hmKnots[0];
    var hmPositions = [];
    var hmGrid = [];
    forEachLine(in, sLine) {
        var sCmd = sLine.substring(0,1);
        var iCount = sLine.substring(2).checkInt(0);
        for (var i=0; i<iCount; i++) {
            // Move head
            if (sCmd == "R") { hmHead[0] = hmHead[0] + 1; }
            if (sCmd == "L") { hmHead[0] = hmHead[0] - 1; }
            if (sCmd == "U") { hmHead[1] = hmHead[1] + 1; }
            if (sCmd == "D") { hmHead[1] = hmHead[1] - 1; }
            // Move tail knots to be close with head
            for (var j=1; j<iKnotCount; j++) {
                moveKnot(hmKnots[j-1], hmKnots[j]);
            }
            var j=iKnotCount-1; // Only track the last knot...
            var iPosTailX = hmKnots[j][0];
            var iPosTailY = hmKnots[j][1];
            var hmRow = hmGrid[iPosTailY];
            if (hmRow == null) { hmRow = []; hmGrid[iPosTailY] = hmRow; }
            hmRow[iPosTailX] = "#";
            hmPositions[iPosTailX + "," + iPosTailY] = true;
        }
    }
    writeGrid(hmGrid, hmKnots, true);
    out.writeln(iKnotCount + " knots: Positions touched: " + hmPositions.size());
}
countKnotPositions(2);
countKnotPositions(10);
